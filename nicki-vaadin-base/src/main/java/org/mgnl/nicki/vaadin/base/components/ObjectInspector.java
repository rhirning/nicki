package org.mgnl.nicki.vaadin.base.components;

import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.HierarchicalContainer;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Tree;
import com.vaadin.ui.TreeTable;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Tree.ExpandEvent;

public class ObjectInspector extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private TreeTable tree;
	
	private HierarchicalContainer container;

	private static final long serialVersionUID = 3256191025469832300L;
	public ObjectInspector(Object object) {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		initTree(object);

	}

	@SuppressWarnings("unchecked")
	private void initTree(Object object) {
		container = new HierarchicalContainer();
		container.addContainerProperty("name", String.class, null);
		container.addContainerProperty("value", String.class, null);
		
		container.addItem(object);
		container.getContainerProperty(object, "name").setValue("Object");
		container.getContainerProperty(object, "value").setValue(object.toString());
		tree.setContainerDataSource(container);
		
		if (hasChildren(object)) {
			tree.setChildrenAllowed(object, true);
		} else {
			tree.setChildrenAllowed(object, false);
		}
		
		tree.addExpandListener(new Tree.ExpandListener() {
			private static final long serialVersionUID = 8148298861638159882L;

			@Override
			public void nodeExpand(ExpandEvent event) {
				Object object = event.getItemId();
				if (hasChildren(object) && !container.hasChildren(object)) {
					addChildren(object);
				}
			}
		});
	}

	protected void addChildren(Object object) {
		Map<String, Object> attributes = getAttributes(object);
		for (String name : attributes.keySet()) {
			container.addItem(attributes.get(name));
			container.setParent(attributes.get(name), object);
		}
	}

	private boolean hasChildren(Object object) {
		return getAttributes(object).size() > 0;
	}

	private Map<String, Object> getAttributes(Object object) {
		Map<String, Object> map = new HashMap<>();
		for (Field field : object.getClass().getFields()) {
			try {
				map.put(field.getName(), field.get(object));
			} catch (IllegalArgumentException | IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return map;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// tree
		tree = new TreeTable();
		tree.setImmediate(true);
		tree.setWidth("100.0%");
		tree.setHeight("100.0%");
		mainLayout.addComponent(tree);
		
		return mainLayout;
	}

}
