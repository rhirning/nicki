/**
 * Copyright (c) 2003-2015 Dr. Ralf Hirning
 * All rights reserved.
 *  
 * This program is dual-licensed under both the GNU General
 * Public License and an individual license with Dr. Ralf
 * Hirning.
 * 
 * 1. For the GPL license (GPL), you can redistribute and/or
 * modify this file under the terms of the GNU Public License v3.0
 * which is available at
 * http://www.gnu.org/licenses/gpl.html
 * 2. For the individual license, this file and the accompanying
 * materials are made available under the terms of the
 * individual license.
 * 
 * Any modifications to this file must keep this entire header
 * intact.
*/
package org.mgnl.nicki.editor.projects.core;

import org.mgnl.nicki.core.i18n.I18n;
import org.mgnl.nicki.core.objects.DynamicObject;
import org.mgnl.nicki.core.objects.DynamicObjectException;
import org.mgnl.nicki.editor.projects.objects.Project;
import org.mgnl.nicki.vaadin.base.editor.ClassEditor;
import org.mgnl.nicki.vaadin.base.editor.NickiTreeEditor;
import org.mgnl.nicki.vaadin.base.fields.AttributeSelectObjectField;
import org.mgnl.nicki.vaadin.base.fields.AttributeTextAreaField;
import org.mgnl.nicki.vaadin.base.fields.AttributeTextField;
import org.mgnl.nicki.vaadin.base.fields.DynamicAttributeField;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Layout;
import com.vaadin.ui.NativeSelect;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Button.ClickEvent;

public class ProjectDataView extends CustomComponent implements ClassEditor {
	private static final long serialVersionUID = -8525549254470827769L;
	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private NativeSelect projectDeputy;
	@AutoGenerated
	private TextArea projectDescription;
	@AutoGenerated
	private TextField projectDirectory;
	@AutoGenerated
	private TextField projectName;
	
	private DynamicAttributeField<String> projectNameField;
	private DynamicAttributeField<String> projectDirectoryField;
	private DynamicAttributeField<String> projectDescriptionField;
	private DynamicAttributeField<String> deputyField;
	private Button saveButton;
	
	private Project project;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 * @param project 
	 */
	public ProjectDataView() {
	}

	public void setDynamicObject(NickiTreeEditor nickiEditor,
			DynamicObject dynamicObject) {
		this.project = (Project) dynamicObject;
		this.projectNameField = new AttributeTextField();
		this.projectNameField.init("name", project, null);
		this.projectDirectoryField = new AttributeTextField();
		this.projectDirectoryField.init("projectdirectory", project, null);
		this.projectDescriptionField = new AttributeTextAreaField();
		this.projectDescriptionField.init("description", project, null);
		this.deputyField = new AttributeSelectObjectField();
		this.deputyField.init("deputy", project, null);
		
		buildMainLayout();
		setCompositionRoot(mainLayout);
		setWidth("100%");
		setHeight(400, Unit.PIXELS);
		if (project.isProjectDeputyLeader(nickiEditor.getNickiContext().getUser())) {
			this.projectDeputy.setReadOnly(true);
		}
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// projectName
		projectName = (TextField) this.projectNameField.getComponent(true);
		projectName.setWidth("400px");
		projectName.setCaption("Projektname");
		mainLayout.addComponent(projectName, "top:20.0px;left:20.0px;");
		
		// projectDirectory
		projectDirectory = (TextField) this.projectDirectoryField.getComponent(true);
		projectDirectory.setWidth("400px");
		projectDirectory.setCaption("Verzeichnis");
		mainLayout.addComponent(projectDirectory, "top:60.0px;left:20.0px;");
		
		// projectDescription
		projectDescription = (TextArea) this.projectDescriptionField.getComponent(false);;
//		projectDescription.setWidth("400px");
		projectDescription.setCaption("Projektbeschreibung");
		mainLayout.addComponent(projectDescription, "top:100.0px;left:20.0px;");
		
		// projectDeputy
		projectDeputy = (NativeSelect) this.deputyField.getComponent(false);
		projectDeputy.setWidth("400px");
		projectDeputy.setHeight("-1px");
		projectDeputy.setCaption("Stellvertreter");
		projectDeputy.setImmediate(true);
		mainLayout.addComponent(projectDeputy, "top:220.0px;left:20.0px;");
		
		saveButton = new Button(I18n.getText("nicki.editor.generic.button.save"));
		saveButton.addClickListener(new Button.ClickListener() {
			private static final long serialVersionUID = -22841977280262789L;

			public void buttonClick(ClickEvent event) {
				try {
					project.update();
					Notification.show(I18n.getText("nicki.editor.save.info"));
				} catch (DynamicObjectException e) {
					Notification.show(I18n.getText("nicki.editor.save.error"), 
							e.getMessage(), Type.ERROR_MESSAGE);
				}
			}
		});
		mainLayout.addComponent(saveButton, "top:260.0px;left:20.0px;");

		
		return mainLayout;
	}

	@Override
	public void save() throws Exception {
		// TODO Auto-generated method stub
		
	}

}
