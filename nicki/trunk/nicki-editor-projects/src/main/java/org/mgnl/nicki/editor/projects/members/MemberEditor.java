package org.mgnl.nicki.editor.projects.members;

import java.util.Iterator;


import org.mgnl.nicki.core.i18n.I18n;
import org.mgnl.nicki.dynamic.objects.objects.Directory;
import org.mgnl.nicki.dynamic.objects.objects.Member;
import org.mgnl.nicki.dynamic.objects.objects.Project;
import org.mgnl.nicki.ldap.objects.DynamicObject;
import org.mgnl.nicki.vaadin.base.editor.ClassEditor;
import org.mgnl.nicki.vaadin.base.editor.NickiEditor;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

@SuppressWarnings("serial")
public class MemberEditor extends CustomComponent implements ClassEditor {

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private VerticalLayout verticalLayout_2;
	@AutoGenerated
	private Button saveButton;
	@AutoGenerated
	private Label label_dummy;
	@AutoGenerated
	private Panel directories;
	@AutoGenerated
	private VerticalLayout verticalLayout_1;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;
	@AutoGenerated
	private Label name;
	private NickiEditor nickiEditor;
	private Member member;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	@Deprecated
	public MemberEditor(Project project, Member target, EditMemberHandler handler) {
//		this.editMemberHandler = handler;
		this.member = target;
		buildMainLayout();
		setCompositionRoot(mainLayout);

		name.setValue(this.member.getName());
		for (Iterator<DynamicObject> iterator = project.getDirectories().iterator(); iterator.hasNext();) {
			Directory dir = (Directory) iterator.next();
			DirectoryComponent comp = new DirectoryComponent(member, dir);
			directories.addComponent(comp);
		}
		
		saveButton.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				save();
			}
		});


	}

	protected void save() {
		for (Iterator<Component> iterator = directories.getComponentIterator(); iterator.hasNext();) {
			Component component= iterator.next();
			if (component instanceof DirectoryComponent) {
				DirectoryComponent dirComponent = (DirectoryComponent) component;
				dirComponent.save();
			}
		}
		try {
			member.update();
			getWindow().showNotification(I18n.getText("nicki.editor.save.info"));
			nickiEditor.refresh(getProject());
		} catch (Exception e) {
			getWindow().showNotification(I18n.getText("nicki.editor.save.error"), 
					e.getMessage(), Window.Notification.TYPE_ERROR_MESSAGE);
		}
	}

	public MemberEditor() {
	}
	
	public void setDynamicObject(NickiEditor nickiEditor, DynamicObject dynamicObject) {
		this.nickiEditor = nickiEditor;
		this.member = (Member) dynamicObject;
		buildMainLayout();
		setCompositionRoot(mainLayout);

		name.setValue(this.member.getName());
		for (Iterator<DynamicObject> iterator = getProject().getDirectories().iterator(); iterator.hasNext();) {
			Directory dir = (Directory) iterator.next();
			DirectoryComponent comp = new DirectoryComponent(member, dir);
			directories.addComponent(comp);
		}
		saveButton.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				save();
			
			}
		});
		
	}


	private Project getProject() {
		return (Project) nickiEditor.getParent(member);
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// verticalLayout_2
		verticalLayout_2 = buildVerticalLayout_2();
		mainLayout.addComponent(verticalLayout_2, "top:20.0px;left:20.0px;");
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_2() {
		// common part: create layout
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setWidth("460px");
		verticalLayout_2.setHeight("-1px");
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setMargin(false);
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		verticalLayout_2.addComponent(horizontalLayout_1);
		
		// directories
		directories = buildDirectories();
		verticalLayout_2.addComponent(directories);
		
		// label_dummy
		label_dummy = new Label();
		label_dummy.setWidth("-1px");
		label_dummy.setHeight("20px");
		label_dummy.setImmediate(false);
		verticalLayout_2.addComponent(label_dummy);
		
		// closeButton
		saveButton = new Button();
		saveButton.setWidth("-1px");
		saveButton.setHeight("-1px");
		saveButton.setCaption("Speichern");
		saveButton.setImmediate(true);
		verticalLayout_2.addComponent(saveButton);
		
		return verticalLayout_2;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setWidth("100.0%");
		horizontalLayout_1.setHeight("40px");
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setMargin(false);
		
		// name
		name = new Label();
		name.setWidth("-1px");
		name.setHeight("-1px");
		name.setValue("Name");
		name.setImmediate(false);
		horizontalLayout_1.addComponent(name);
		
		return horizontalLayout_1;
	}

	@AutoGenerated
	private Panel buildDirectories() {
		// common part: create layout
		directories = new Panel();
		directories.setWidth("400px");
		directories.setHeight("-1px");
		directories.setCaption("Verzeichnisse");
		directories.setImmediate(false);
		
		// verticalLayout_1
		verticalLayout_1 = new VerticalLayout();
		verticalLayout_1.setWidth("100.0%");
		verticalLayout_1.setHeight("-1px");
		verticalLayout_1.setImmediate(false);
		verticalLayout_1.setMargin(false);
		directories.setContent(verticalLayout_1);
		
		return directories;
	}


}
