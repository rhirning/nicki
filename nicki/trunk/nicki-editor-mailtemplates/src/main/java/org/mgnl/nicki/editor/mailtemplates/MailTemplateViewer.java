/**
 * This file Copyright (c) 2003-2011 Dr. Ralf Hirning
 * All rights reserved.
 *
 *
 * This file is dual-licensed under both the GNU General
 * Public License and an individual license with Dr. Ralf
 * Hirning.
 *
 * This file is distributed in the hope that it will be
 * useful, but AS-IS and WITHOUT ANY WARRANTY; without even the
 * implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE, TITLE, or NONINFRINGEMENT.
 * Redistribution, except as permitted by whichever of the GPL
 * or the individual license, is prohibited.
 *
 * 1. For the GPL license (GPL), you can redistribute and/or
 * modify this file under the terms of the GNU General
 * Public License, Version 3, as published by the Free Software
 * Foundation.  You should have received a copy of the GNU
 * General Public License, Version 3 along with this program;
 * if not, write to the Free Software Foundation, Inc., 51
 * Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * 2. For the individual license, this file and the accompanying
 * materials are made available under the terms of the
 * individual license.
 *
 * Any modifications to this file must keep this entire header
 * intact.
 *
 */
package org.mgnl.nicki.editor.mailtemplates;


import javax.naming.NamingException;

import org.apache.commons.lang.StringUtils;
import org.mgnl.nicki.core.i18n.I18n;
import org.mgnl.nicki.dynamic.objects.objects.Template;
import org.mgnl.nicki.ldap.context.NickiContext;
import org.mgnl.nicki.ldap.objects.DynamicObject;
import org.mgnl.nicki.ldap.objects.DynamicObjectException;
import org.mgnl.nicki.mailtemplate.engine.MailTemplateEngine;
import org.mgnl.nicki.vaadin.base.components.SimpleEditor;
import org.mgnl.nicki.vaadin.base.components.TestDataView;
import org.mgnl.nicki.vaadin.base.data.ListPartDataContainer;
import org.mgnl.nicki.vaadin.base.data.PartDataContainer;

import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button.ClickEvent;

@SuppressWarnings("serial")
public class MailTemplateViewer extends CustomComponent {

	private AbsoluteLayout mainLayout;
	
	private TabSheet tab;
	private Template template = null;
	private Button saveButton;
	private Button deleteButton;
	private boolean allowDelete;
	private boolean hasTestData;
	private String messageKeyBase;
	private NickiContext context;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public <T extends DynamicObject> MailTemplateViewer(NickiContext ctx, String path, String localeName, String messageKeyBase) {
		this.context = ctx;
		this.hasTestData = false;
		this.allowDelete = true;
		this.messageKeyBase = messageKeyBase;
		if (context.isExist(path)) {
			Template localeObject = context.loadObject(Template.class, path);
			setDynamicObject(localeObject);
		} else {
			// add create button
			buildEditor();
			mainLayout = new AbsoluteLayout();
			Button createButton = new Button(I18n.getText(this.messageKeyBase + ".locale.button.create"));
			createButton.addListener(new CreateLocaleListener(path));
			mainLayout.addComponent(createButton, "top:20.0px;left:20.0px;");

			setCompositionRoot(mainLayout);
		}

	}
	
	public class CreateLocaleListener implements Button.ClickListener {
		private String path;
		public CreateLocaleListener(String path) {
			super();
			this.path = path;
		}

		public void buttonClick(ClickEvent event) {
			try {
				String parentPath = StringUtils.substringAfter(path, ",");
				String namingValue = StringUtils.substringAfter(StringUtils.substringBefore(path, ","), "=");
				Template localeTemplate = (Template) context.createDynamicObject(Template.class, parentPath, namingValue);
				setDynamicObject(localeTemplate);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	
	public MailTemplateViewer(Template template, String messageKeyBase) {
		this.messageKeyBase = messageKeyBase;
		this.hasTestData = true;
		this.allowDelete = false;
		setDynamicObject(template);
	}

	private void setDynamicObject(Template template) {
		this.template = template;
		buildEditor();
		setCompositionRoot(mainLayout);
		
		createSheets();
		
		saveButton.addListener(new Button.ClickListener() {
			
			public void buttonClick(ClickEvent event) {
				try {
					save();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
		
		if (allowDelete) {
			deleteButton.addListener(new Button.ClickListener() {
				
				public void buttonClick(ClickEvent event) {
					try {
						delete();
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			});
		}
		
	}


	protected void delete() {
		if (this.template != null) {
			String path = template.getPath(); 
			// delete DynamicObject
			try {
				template.delete();
			} catch (DynamicObjectException e) {
				e.printStackTrace();
			}
			this.template = null;
			// add create button
			buildEditor();
			mainLayout = new AbsoluteLayout();
			Button createButton = new Button(I18n.getText(this.messageKeyBase + ".locale.button.create"));
			createButton.addListener(new CreateLocaleListener(path));
			mainLayout.addComponent(createButton, "top:20.0px;left:20.0px;");

			setCompositionRoot(mainLayout);

		}

	}

	private void createSheets() {
		for (int i = 0; i < MailTemplateEngine.MAILPARTS.length; i++) {
			String name = MailTemplateEngine.MAILPARTS[i];
			tab.addTab(new SimpleEditor(new PartDataContainer(template, name, "parts", "=")), name, null);
		}
		if (this.hasTestData) {
			tab.addTab(new TestDataView(new ListPartDataContainer(template, "testData", "="), this.messageKeyBase),
					"Test Data", null);
		}
	}
	
	private AbsoluteLayout buildEditor() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		VerticalLayout verticalLayout = new VerticalLayout();
		verticalLayout.setHeight("100%");
		mainLayout.addComponent(verticalLayout, "top:20.0px;left:20.0px;right:20.0px;bottom:20.0px;");

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		tab = new TabSheet();
		tab.setWidth("600px");
		tab.setHeight("240px");
		tab.setImmediate(false);
		verticalLayout.addComponent(tab);

		HorizontalLayout horizontalLayout = new HorizontalLayout();
		horizontalLayout.setHeight(40, UNITS_PIXELS);
		verticalLayout.addComponent(horizontalLayout);
		saveButton = new Button();
		saveButton.setWidth("-1px");
		saveButton.setHeight("-1px");
		saveButton.setCaption(I18n.getText(this.messageKeyBase + ".locale.button.save"));
		saveButton.setImmediate(true);
		horizontalLayout.addComponent(saveButton);
		if (isAllowDelete()) {
			deleteButton = new Button();
			deleteButton.setWidth("-1px");
			deleteButton.setHeight("-1px");
			deleteButton.setCaption(I18n.getText(this.messageKeyBase + ".locale.button.delete"));
			deleteButton.setImmediate(true);
			horizontalLayout.addComponent(deleteButton);
		}		
		return mainLayout;
	}

	public TabSheet getTab() {
		return tab;
	}

	public void save() throws DynamicObjectException, NamingException {
		if (template.isComplete()) {
			if (!template.isNew()) {
				template.update();
			}
		}
	}

	public void setAllowDelete(boolean allowDelete) {
		this.allowDelete = allowDelete;
	}

	public boolean isAllowDelete() {
		return allowDelete;
	}
	
}
