/**
 * This file Copyright (c) 2003-2011 Dr. Ralf Hirning
 * All rights reserved.
 *
 *
 * This file is dual-licensed under both the GNU General
 * Public License and an individual license with Dr. Ralf
 * Hirning.
 *
 * This file is distributed in the hope that it will be
 * useful, but AS-IS and WITHOUT ANY WARRANTY; without even the
 * implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE, TITLE, or NONINFRINGEMENT.
 * Redistribution, except as permitted by whichever of the GPL
 * or the individual license, is prohibited.
 *
 * 1. For the GPL license (GPL), you can redistribute and/or
 * modify this file under the terms of the GNU General
 * Public License, Version 3, as published by the Free Software
 * Foundation.  You should have received a copy of the GNU
 * General Public License, Version 3 along with this program;
 * if not, write to the Free Software Foundation, Inc., 51
 * Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * 2. For the individual license, this file and the accompanying
 * materials are made available under the terms of the
 * individual license.
 *
 * Any modifications to this file must keep this entire header
 * intact.
 *
 */
package org.mgnl.nicki.editor.templates;


import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.naming.NamingException;

import org.apache.commons.lang.StringUtils;
import org.mgnl.nicki.core.data.TreeData;
import org.mgnl.nicki.core.i18n.I18n;
import org.mgnl.nicki.core.objects.DynamicObjectException;
import org.mgnl.nicki.dynamic.objects.objects.Template;
import org.mgnl.nicki.template.engine.TemplateParameter;
import org.mgnl.nicki.vaadin.base.editor.ClassEditor;
import org.mgnl.nicki.vaadin.base.editor.NickiTreeEditor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.vaadin.server.FileDownloader;
import com.vaadin.server.StreamResource;
import com.vaadin.server.StreamResource.StreamSource;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Notification;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class TemplateConfig extends CustomComponent implements ClassEditor {
	private static final Logger LOG = LoggerFactory.getLogger(TemplateConfig.class);
	public static final String DIALOG_WIDTH = ".dialogWidth";
	public static final String DIALOG_HEIGHT = ".dialogHeight";

	private VerticalLayout mainLayout;

	private Component configDialog;
	private Template template;
	private Button previewButton;
	private Button htmlPreviewButton;
	/*
	private Link csvLink;
	private Link pdfLink;
	private Link xlsLink;
	 */
	private Button csvButton;
	private Button pdfButton;
	private Button xlsButton;
	private FileDownloader csvFileDownloader;
	private FileDownloader pdfFileDownloader;
	private FileDownloader xlsFileDownloader;
	private boolean usePreview = true;
	private NickiTreeEditor editor;
	private Map<String, Object> params = new HashMap<String, Object>();


	public TemplateConfig() {
	}

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	@Override
	public void setDynamicObject(NickiTreeEditor nickiEditor, TreeData dynamicObject) {
		this.editor = nickiEditor;
		this.template = (Template) dynamicObject;
		params = new HashMap<String, Object>();
		buildEditor();
		setCompositionRoot(mainLayout);
		StreamResource csvSource = createCSVStream();
		csvFileDownloader = new FileDownloader(csvSource);
		csvFileDownloader.extend(csvButton);
		StreamResource xlsSource = createXLSStream();
		xlsFileDownloader = new FileDownloader(xlsSource);
		xlsFileDownloader.extend(xlsButton);
		StreamResource pdfSource = createPDFStream();
		pdfFileDownloader = new FileDownloader(pdfSource);
		pdfFileDownloader.extend(pdfButton);
		initI18n();

		if (usePreview) {
			previewButton.addClickListener(new Button.ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {
					try {
						preview();
					} catch (Exception e) {
						LOG.error("Error", e);
					}
				}
			});
		}

		htmlPreviewButton.addClickListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				try {
					htmlPreview();
				} catch (Exception e) {
					LOG.error("Error", e);
				}
			}
		});

		/* alte Methode mit Link
		//pdfLink.setCaption("PDF");
		pdfLink.setTargetName("_blank");
		StreamSource pdfStreamSource;
		if (template.hasPart("pdf")) {
			pdfStreamSource = new PdfStreamSource2(template, template.getContext(), params);
		} else {
			pdfStreamSource = new PdfStreamSource(template, template.getContext(), params);
		}
		pdfLink.setResource(new LinkResource(pdfStreamSource, template.getName() + ".pdf",
				"application/pdf"));

		if (template.hasPart("xls")) {
			//xlsLink.setCaption("XLS");
			xlsLink.setTargetName("_blank");

			StreamSource xlsStreamSource = new XlsStreamSource(template, template.getContext(), params);;
			xlsLink.setResource(new LinkResource(xlsStreamSource, template.getName() + ".xls",
					"application/vnd.ms-excel"));
		}

		//csvLink.setCaption("CSV");
		csvLink.setTargetName("_blank");
		StreamSource csvStreamSource;
		if (template.hasPart("pdf")) {
			csvStreamSource = new CsvStreamSource2(template, template.getContext(), params);
		} else {
			csvStreamSource = new CsvStreamSource(template, template.getContext(), params);
		}
		csvLink.setResource(new LinkResource(csvStreamSource, template.getName() + ".csv",
				"text/comma-separated-values"));

		 */

		paramsChanged();
	}

	private void initI18n() {
		previewButton.setCaption(I18n.getText(editor.getMessageKeyBase() + ".config.button.preview"));
		htmlPreviewButton.setCaption(I18n.getText(editor.getMessageKeyBase() + ".config.button.htmlpreview"));
		/*
		pdfLink.setCaption(I18n.getText(editor.getMessageKeyBase() + ".config.link.pdf"));
		csvLink.setCaption(I18n.getText(editor.getMessageKeyBase() + ".config.link.csv"));
		xlsLink.setCaption(I18n.getText(editor.getMessageKeyBase() + ".config.link.xls"));
		 */
		pdfButton.setCaption(I18n.getText(editor.getMessageKeyBase() + ".config.link.pdf"));
		csvButton.setCaption(I18n.getText(editor.getMessageKeyBase() + ".config.link.csv"));
		xlsButton.setCaption(I18n.getText(editor.getMessageKeyBase() + ".config.link.xls"));
	}

	protected void close() {
	}

	protected void preview() throws DynamicObjectException, NamingException {
		if (isComplete()) {
			PreviewTemplate preview = new PreviewTemplate(editor.getNickiContext(), editor.getMessageKeyBase(), params);
			preview.execute(template);
		}
	}


	protected void htmlPreview() throws DynamicObjectException, NamingException {
		if (isComplete()) {
			HtmlPreviewTemplate preview = new HtmlPreviewTemplate(editor.getNickiContext(), editor.getMessageKeyBase(), params);
			preview.execute(template);
		}
	}

	protected StreamResource createCSVStream() {
		return new StreamResource(new StreamSource() {

			@Override
			public InputStream getStream() {
				StreamSource csvStreamSource = null;
				if (isComplete()) {
					if (template.hasPart("pdf")) {
						csvStreamSource = new CsvStreamSource2(template, template.getContext(), params);
					} else {
						csvStreamSource = new CsvStreamSource(template, template.getContext(), params);
					}
				}
				if (csvStreamSource != null) {
					return csvStreamSource.getStream();
				} else {
					return null;
				}
			}
		}, template != null ? template.getName() + ".csv" : "template.csv");
	}

	protected StreamResource createXLSStream() {
		return new StreamResource(new StreamSource() {

			@Override
			public InputStream getStream() {
				StreamSource xlsStreamSource = null;
				if (isComplete() && template.hasPart("xls")) {
					xlsStreamSource = new XlsStreamSource(template, template.getContext(), params);
				}
				if (xlsStreamSource != null) {
					return xlsStreamSource.getStream();
				} else {
					return null;
				}
			}
		}, template != null ? template.getName() + ".xls" : "template.xls");
	}

	protected StreamResource createPDFStream() {
		return new StreamResource(new StreamSource() {

			@Override
			public InputStream getStream() {
				StreamSource pdfStreamSource = null;
				if (isComplete()) {
					if (template.hasPart("pdf")) {
						pdfStreamSource = new PdfStreamSource2(template, template.getContext(), params);
					} else {
						pdfStreamSource = new PdfStreamSource(template, template.getContext(), params);
					}
				}
				if (pdfStreamSource != null) {
					return pdfStreamSource.getStream();
				} else {
					return null;
				}
			}
		}, template != null ? template.getName() + ".pdf" : "template.pdf");
	}

	protected boolean isComplete() {
		if (!GuiTemplateHelper.isComplete(template, params)) {
			Notification.show(I18n.getText(editor.getMessageKeyBase()+ ".error.params.incomplete"));
			return false;
		} else {
			return true;
		}

	}

	private VerticalLayout buildEditor() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		mainLayout.setHeight("-1px");
		mainLayout.setWidth("100%");

		// top-level component properties
		// setWidth("100.0%");
		// setHeight("100.0%");

		GuiTemplateHandler handler = GuiTemplateHelper.getGuiTemplateHandler(template);
		configDialog = handler.getConfigDialog(template, params, this);
		List<TemplateParameter> templateParams = handler.getTemplateParameters();
		String width  = getTemplateParameter(templateParams, DIALOG_WIDTH, "800px");
		String height = getTemplateParameter(templateParams, DIALOG_HEIGHT, "400px");
		
		setHeight(height);
		setWidth(width);
		configDialog.setWidth("100%");

		configDialog.setHeight("100%");

		mainLayout.addComponent(configDialog);

		HorizontalLayout horizontalLayout = new HorizontalLayout();
		horizontalLayout.setSpacing(true);
		horizontalLayout.setHeight(40, Unit.PIXELS);

		previewButton = new Button();
		previewButton.setWidth("-1px");
		previewButton.setHeight("-1px");
		previewButton.setCaption("Vorschau");
		previewButton.setImmediate(true);
		if (usePreview) {
			horizontalLayout.addComponent(previewButton);
		}
		htmlPreviewButton = new Button();
		htmlPreviewButton.setWidth("-1px");
		htmlPreviewButton.setHeight("-1px");
		htmlPreviewButton.setCaption("HTML Vorschau");
		htmlPreviewButton.setImmediate(true);
		horizontalLayout.addComponent(htmlPreviewButton);

		/*
		pdfLink = new Link();
		horizontalLayout.addComponent(pdfLink);

		csvLink = new Link();
		horizontalLayout.addComponent(csvLink);

		xlsLink = new Link();
		horizontalLayout.addComponent(xlsLink);
		 */

		csvButton = new Button();
		csvButton.setWidth("-1px");
		csvButton.setHeight("-1px");
		csvButton.setCaption("CSV");
		csvButton.setImmediate(true);
		horizontalLayout.addComponent(csvButton);

		xlsButton = new Button();
		xlsButton.setWidth("-1px");
		xlsButton.setHeight("-1px");
		xlsButton.setCaption("XLS");
		xlsButton.setImmediate(true);
		horizontalLayout.addComponent(xlsButton);

		pdfButton = new Button();
		pdfButton.setWidth("-1px");
		pdfButton.setHeight("-1px");
		pdfButton.setCaption("PDF");
		pdfButton.setImmediate(true);
		horizontalLayout.addComponent(pdfButton);

		mainLayout.addComponent(horizontalLayout);
		
		return mainLayout;
	}

	private String getTemplateParameter(List<TemplateParameter> templateParams,
			String name, String defaultValue) {
		for (TemplateParameter templateParameter : templateParams) {
			if (StringUtils.equals(templateParameter.getName(), name)) {
				return templateParameter.getValue();
			}
		}
		return defaultValue;
	}

	public void paramsChanged() {
		if (GuiTemplateHelper.isComplete(template, params)) {
			//pdfLink.setEnabled(true);
			pdfButton.setEnabled(true);
			//csvLink.setEnabled(true);
			csvButton.setEnabled(true);
			if (template.hasPart("xls")) {
				//xlsLink.setEnabled(true);
				xlsButton.setEnabled(true);
			}
		} else {
			//pdfLink.setEnabled(false);
			pdfButton.setEnabled(false);
			//csvLink.setEnabled(false);
			csvButton.setEnabled(false);
			//xlsLink.setEnabled(false);
			xlsButton.setEnabled(false);
		}
	}

	@Override
	public void save() {
	}

	public boolean isUsePreview() {
		return usePreview;
	}

	public void setUsePreview(boolean usePreview) {
		this.usePreview = usePreview;
	}

}
