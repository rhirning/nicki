/**
 * This file Copyright (c) 2003-2011 Dr. Ralf Hirning
 * All rights reserved.
 *
 *
 * This file is dual-licensed under both the GNU General
 * Public License and an individual license with Dr. Ralf
 * Hirning.
 *
 * This file is distributed in the hope that it will be
 * useful, but AS-IS and WITHOUT ANY WARRANTY; without even the
 * implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE, TITLE, or NONINFRINGEMENT.
 * Redistribution, except as permitted by whichever of the GPL
 * or the individual license, is prohibited.
 *
 * 1. For the GPL license (GPL), you can redistribute and/or
 * modify this file under the terms of the GNU General
 * Public License, Version 3, as published by the Free Software
 * Foundation.  You should have received a copy of the GNU
 * General Public License, Version 3 along with this program;
 * if not, write to the Free Software Foundation, Inc., 51
 * Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * 2. For the individual license, this file and the accompanying
 * materials are made available under the terms of the
 * individual license.
 *
 * Any modifications to this file must keep this entire header
 * intact.
 *
 */
package org.mgnl.nicki.editor.templates;

import javax.naming.NamingException;

import org.mgnl.nicki.core.i18n.I18n;
import org.mgnl.nicki.core.objects.DynamicObjectException;
import org.mgnl.nicki.dynamic.objects.objects.Template;
import org.mgnl.nicki.core.objects.DynamicObject;
import org.mgnl.nicki.vaadin.base.components.SimpleEditor;
import org.mgnl.nicki.vaadin.base.components.TestDataView;
import org.mgnl.nicki.vaadin.base.data.AttributeDataContainer;
import org.mgnl.nicki.vaadin.base.data.ListPartDataContainer;
import org.mgnl.nicki.vaadin.base.editor.ClassEditor;
import org.mgnl.nicki.vaadin.base.editor.NickiTreeEditor;

import com.vaadin.terminal.Sizeable;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.Button.ClickEvent;

@SuppressWarnings("serial")
public class TemplateViewer extends CustomComponent implements ClassEditor {

	private AbsoluteLayout mainLayout;
	
	private TabSheet tab;
	private Template template;
	private Button saveButton;
	private Button executeButton;
	private NickiTreeEditor editor;
	private Window previewWindow;	

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public TemplateViewer() {
	}
	
	public void setDynamicObject(NickiTreeEditor nickiEditor, DynamicObject dynamicObject) {
		this.editor = nickiEditor;
		this.template = (Template) dynamicObject;
		buildEditor();
		setCompositionRoot(mainLayout);
		initI18n();
		
		createSheets();
		
		saveButton.addListener(new Button.ClickListener() {
			
			public void buttonClick(ClickEvent event) {
				try {
					save();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
		executeButton.addListener(new Button.ClickListener() {
			
			public void buttonClick(ClickEvent event) {
				try {
					execute();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
		
	}
	
	private void initI18n() {
		saveButton.setCaption(I18n.getText(editor.getMessageKeyBase() + ".button.save"));
		executeButton.setCaption(I18n.getText(editor.getMessageKeyBase() + ".button.execute"));
	}

	protected void execute() throws DynamicObjectException, NamingException {
		save();
		TemplateConfig configDialog = new TemplateConfig();
		configDialog.setDynamicObject(editor, template);
		previewWindow = new Window(I18n.getText(editor.getMessageKeyBase() + ".config.window.title"), configDialog);
		previewWindow.setModal(true);
		previewWindow.setWidth(480, Sizeable.UNITS_PIXELS);
		previewWindow.setHeight(520, Sizeable.UNITS_PIXELS);
		this.getWindow().addWindow(previewWindow);
	}

	private void createSheets() {
		tab.addTab(new SimpleEditor(new AttributeDataContainer(template, "data")), I18n.getText(editor.getMessageKeyBase() +".tab.data"), null);
		tab.addTab(new TestDataView(new ListPartDataContainer(template, "testData", "="), editor.getMessageKeyBase()),
				I18n.getText(editor.getMessageKeyBase() +".tab.testdata"), null);
		tab.addTab(new SimpleEditor(new AttributeDataContainer(template, "params")), I18n.getText(editor.getMessageKeyBase() +".tab.params"), null);
	}
	
	private AbsoluteLayout buildEditor() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		VerticalLayout verticalLayout = new VerticalLayout();
		verticalLayout.setHeight("100%");
		mainLayout.addComponent(verticalLayout, "top:20.0px;left:20.0px;");

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		tab = new TabSheet();
		tab.setWidth("640px");
		tab.setHeight("640px");
		tab.setImmediate(false);
		verticalLayout.addComponent(tab);

		HorizontalLayout horizontalLayout = new HorizontalLayout();
		horizontalLayout.setSpacing(true);
		horizontalLayout.setHeight(40, UNITS_PIXELS);
		verticalLayout.addComponent(horizontalLayout);
		saveButton = new Button();
		saveButton.setWidth("-1px");
		saveButton.setHeight("-1px");
		saveButton.setCaption("Speichern");
		saveButton.setImmediate(true);
		horizontalLayout.addComponent(saveButton);
		
		executeButton = new Button();
		executeButton.setWidth("-1px");
		executeButton.setHeight("-1px");
		executeButton.setCaption("Execute");
		executeButton.setImmediate(true);
		horizontalLayout.addComponent(executeButton);
				
		return mainLayout;
	}

	public TabSheet getTab() {
		return tab;
	}


	public void save() throws DynamicObjectException, NamingException {
		if (template.isComplete()) {
			if (!template.isNew()) {
				template.update();
			}
		}
	}
	
}
