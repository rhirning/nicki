/**
 * This file Copyright (c) 2011 deron Consulting GmbH
 * Author: Dr. Ralf Hirning
 * All rights reserved.
 *
 * Any modifications to this file must keep this entire header
 * intact.
 *
 */
package org.mgnl.nicki.editor.projects.members;

import org.mgnl.nicki.core.i18n.I18n;
import org.mgnl.nicki.dynamic.objects.objects.Directory;
import org.mgnl.nicki.dynamic.objects.objects.Member;
import org.mgnl.nicki.dynamic.objects.objects.Member.RIGHT;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.OptionGroup;

@SuppressWarnings("serial")
public class DirectoryComponent extends CustomComponent {

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;

	private OptionGroup rights;

	@AutoGenerated
	private Label directoryLabel;
	private Directory directory;
	private Member member;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public DirectoryComponent(Member target, Directory dir) {
		this.member = target;
		this.directory = dir;
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		directoryLabel.setValue(this.directory.getDisplayName());
		
		rights.addItem(Member.RIGHT.NONE);
		rights.setItemCaption(Member.RIGHT.NONE, I18n.getText("nicki.editor.projects.right.none"));
		rights.addItem(Member.RIGHT.READ);
		rights.setItemCaption(Member.RIGHT.READ, I18n.getText("nicki.editor.projects.right.read"));
		rights.addItem(Member.RIGHT.WRITE);
		rights.setItemCaption(Member.RIGHT.WRITE, I18n.getText("nicki.editor.projects.right.write"));
		if (member.hasReadRight(directory)) {
			rights.select(Member.RIGHT.READ);
		} else if (member.hasWriteRight(directory)) {
				rights.select(Member.RIGHT.WRITE);
		} else {
			rights.select(Member.RIGHT.NONE);
		}
		rights.setStyleName("horizontal");
		/*
		checkBox_read.addListener(new Property.ValueChangeListener() {
			public void valueChange(ValueChangeEvent event) {
				member.setReadRight(directory, checkBox_read.booleanValue());
				try {
					member.update();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
		checkBox_write.addListener(new Property.ValueChangeListener() {
			public void valueChange(ValueChangeEvent event) {
				member.setWriteRight(directory, checkBox_write.booleanValue());
				try {
					member.update();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
		*/
	}

	public void save() {
		member.setRight(directory, (RIGHT) rights.getValue());
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		
		// top-level component properties
		setHeight("24px");
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		mainLayout
				.addComponent(horizontalLayout_1,
						"top:0.0px;right:-2.9761963px;bottom:0.99993896px;left:10.0px;");
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setWidth("100.0%");
		horizontalLayout_1.setHeight("-1px");
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setMargin(false);
		
		// directoryLabel
		directoryLabel = new Label();
		directoryLabel.setWidth("200px");
		directoryLabel.setHeight("-1px");
		directoryLabel.setValue("Verzeichnis");
		directoryLabel.setImmediate(false);
		horizontalLayout_1.addComponent(directoryLabel);
		
		// rights
		rights = new OptionGroup();
		rights.setWidth("-1px");
		rights.setHeight("-1px");
		rights.setImmediate(false);
		horizontalLayout_1.addComponent(rights);
	
		return horizontalLayout_1;
	}

}
