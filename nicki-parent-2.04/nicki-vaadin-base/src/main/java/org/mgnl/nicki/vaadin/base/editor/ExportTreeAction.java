/**
 * This file Copyright (c) 2003-2011 Dr. Ralf Hirning
 * All rights reserved.
 *
 *
 * This file is dual-licensed under both the GNU General
 * Public License and an individual license with Dr. Ralf
 * Hirning.
 *
 * This file is distributed in the hope that it will be
 * useful, but AS-IS and WITHOUT ANY WARRANTY; without even the
 * implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE, TITLE, or NONINFRINGEMENT.
 * Redistribution, except as permitted by whichever of the GPL
 * or the individual license, is prohibited.
 *
 * 1. For the GPL license (GPL), you can redistribute and/or
 * modify this file under the terms of the GNU General
 * Public License, Version 3, as published by the Free Software
 * Foundation.  You should have received a copy of the GNU
 * General Public License, Version 3 along with this program;
 * if not, write to the Free Software Foundation, Inc., 51
 * Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * 2. For the individual license, this file and the accompanying
 * materials are made available under the terms of the
 * individual license.
 *
 * Any modifications to this file must keep this entire header
 * intact.
 *
 */
package org.mgnl.nicki.vaadin.base.editor;

import org.apache.commons.lang.StringUtils;
import org.mgnl.nicki.core.context.NickiContext;
import org.mgnl.nicki.core.i18n.I18n;
import org.mgnl.nicki.core.objects.DynamicObject;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.terminal.Sizeable;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Link;
import com.vaadin.ui.Window;
import com.vaadin.ui.Button.ClickEvent;

public class ExportTreeAction extends BaseTreeAction {

	private static final long serialVersionUID = 8567493886374796976L;


	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;
	@AutoGenerated
	private Button close;
	@AutoGenerated
	private Link exportTree;
	@AutoGenerated
	private Link exportElement;
	private Window parentWindow;
	private Window previewWindow;
	private NickiContext context;
	private String i18nBase;


	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	public ExportTreeAction(NickiContext context, Class<? extends DynamicObject> classDefinition,
			String name, String i18nBase) {
		super(classDefinition, name);
		this.context = context;
		this.i18nBase = i18nBase;
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	public void execute(Window parentWindow, DynamicObject dynamicObject) {
		this.parentWindow = parentWindow;
		
		close.addListener(new Button.ClickListener() {
			private static final long serialVersionUID = 5971264029558549251L;

			public void buttonClick(ClickEvent event) {
				try {
					close();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});

		exportElement.setCaption(I18n.getText(i18nBase + ".export.exportElement"));
		exportElement.setTargetName("_blank");
		ExportStreamSource exportStreamSource = new ExportStreamSource(dynamicObject, context, true);
		exportElement.setResource(
			new LinkResource(exportStreamSource, 
					StringUtils.replace(dynamicObject.getSlashPath(""), "/", "_") + ".xml",
				parentWindow.getApplication(), "text/xml"));

		exportTree.setCaption(I18n.getText(i18nBase + ".export.exportTree"));
		exportTree.setTargetName("_blank");
		exportStreamSource = new ExportStreamSource(dynamicObject, context, false);
		exportTree.setResource(
			new LinkResource(exportStreamSource, 
					StringUtils.replace(dynamicObject.getSlashPath(""), "/", "_") + ".xml",
				parentWindow.getApplication(), "text/xml"));

		if (null != this.getParent()) {
			this.setParent(null);
		}
		previewWindow = new Window(I18n.getText(i18nBase + ".export.window.title"), this);
		previewWindow.setModal(true);
		previewWindow.setWidth(1024, Sizeable.UNITS_PIXELS);
		previewWindow.setHeight(520, Sizeable.UNITS_PIXELS);
		this.parentWindow.addWindow(previewWindow);
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		mainLayout.addComponent(horizontalLayout_1, "top:0.0px;left:0.0px;");
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setWidth("-1px");
		horizontalLayout_1.setHeight("-1px");
		horizontalLayout_1.setMargin(true);
		horizontalLayout_1.setSpacing(true);
		
		// exportElement
		exportElement = new Link();
		exportElement.setCaption("Element exportiern");
		exportElement.setImmediate(true);
		exportElement.setWidth("-1px");
		exportElement.setHeight("-1px");
		horizontalLayout_1.addComponent(exportElement);
		
		// exportTree
		exportTree = new Link();
		exportTree.setCaption("Baum exportieren");
		exportTree.setImmediate(true);
		exportTree.setWidth("-1px");
		exportTree.setHeight("-1px");
		horizontalLayout_1.addComponent(exportTree);
		
		// close
		close = new Button();
		close.setCaption("Schliessen");
		close.setImmediate(false);
		close.setWidth("-1px");
		close.setHeight("-1px");
		horizontalLayout_1.addComponent(close);
		
		return horizontalLayout_1;
	}

	public void close() {
		this.parentWindow.removeWindow(getWindow());
	}

}
