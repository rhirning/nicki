package org.mgnl.nicki.editor.templates;


import java.util.HashMap;
import java.util.Map;

import javax.naming.NamingException;

import org.mgnl.nicki.core.i18n.I18n;
import org.mgnl.nicki.dynamic.objects.objects.Template;
import org.mgnl.nicki.ldap.objects.DynamicObjectException;
import org.mgnl.nicki.vaadin.base.editor.NickiTreeEditor;

import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Link;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button.ClickEvent;

@SuppressWarnings("serial")
public class TemplateConfig extends CustomComponent {

	private AbsoluteLayout mainLayout;
	
	private ConfiguredTemplateConfigDialog configDialog;
	private Template template;
	private Button closeButton;
	private Button previewButton;
	private Button htmlPreviewButton;
	private Link csvLink;
	private Link pdfLink;
	private NickiTreeEditor editor;
	private Map<String, Object> params = new HashMap<String, Object>();

	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public TemplateConfig(NickiTreeEditor nickiEditor, Template theTemplate) {
		this.editor = nickiEditor;
		this.template = (Template) theTemplate;
		buildEditor();
		setCompositionRoot(mainLayout);
		initI18n();
		
		closeButton.addListener(new Button.ClickListener() {
			
			public void buttonClick(ClickEvent event) {
				try {
					close();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
		
		previewButton.addListener(new Button.ClickListener() {
			
			public void buttonClick(ClickEvent event) {
				try {
					preview();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
		
		htmlPreviewButton.addListener(new Button.ClickListener() {
			
			public void buttonClick(ClickEvent event) {
				try {
					htmlPreview();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
		
		pdfLink.setCaption("PDF");
		pdfLink.setTargetName("_blank");
		PdfStreamSource pdfStreamSource = new PdfStreamSource(template, template.getContext(), params);
		pdfLink.setResource(new LinkResource(pdfStreamSource, template.getName() + ".pdf",
				nickiEditor.getApplication(), "application/pdf"));

		csvLink.setCaption("CSV");
		csvLink.setTargetName("_blank");
		CsvStreamSource csvStreamSource = new CsvStreamSource(template, template.getContext(), params);
		csvLink.setResource(new LinkResource(csvStreamSource, template.getName() + ".csv",
				nickiEditor.getApplication(), "text/comma-separated-values"));
	}
	
	private void initI18n() {
		closeButton.setCaption(I18n.getText(editor.getMessageKeyBase() + ".config.button.close"));
		previewButton.setCaption(I18n.getText(editor.getMessageKeyBase() + ".config.button.preview"));
		htmlPreviewButton.setCaption(I18n.getText(editor.getMessageKeyBase() + ".config.button.htmlpreview"));
		pdfLink.setCaption(I18n.getText(editor.getMessageKeyBase() + ".config.link.pdf"));
		csvLink.setCaption(I18n.getText(editor.getMessageKeyBase() + ".config.link.csv"));
	}

	protected void close() {
		getWindow().getParent().removeWindow(getWindow());
	}

	protected void preview() throws DynamicObjectException, NamingException {
		PreviewTemplate preview = new PreviewTemplate(editor.getNickiContext(), editor.getMessageKeyBase(), params);
		preview.execute(editor.getWindow(), template);
	}

	protected void htmlPreview() throws DynamicObjectException, NamingException {
		HtmlPreviewTemplate preview = new HtmlPreviewTemplate(editor.getNickiContext(), editor.getMessageKeyBase(), params);
		preview.execute(editor.getWindow(), template);
	}

	
	private AbsoluteLayout buildEditor() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		VerticalLayout verticalLayout = new VerticalLayout();
		verticalLayout.setHeight("100%");
		mainLayout.addComponent(verticalLayout, "top:20.0px;left:20.0px;");

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		configDialog = new ConfiguredTemplateConfigDialog(template, params);
		configDialog.setWidth("400px");
		configDialog.setHeight("400px");
		configDialog.setImmediate(true);
		verticalLayout.addComponent(configDialog);

		HorizontalLayout horizontalLayout = new HorizontalLayout();
		horizontalLayout.setSpacing(true);
		horizontalLayout.setHeight(40, UNITS_PIXELS);
		verticalLayout.addComponent(horizontalLayout);
		
		closeButton = new Button();
		closeButton.setWidth("-1px");
		closeButton.setHeight("-1px");
		closeButton.setCaption("Schliessen");
		closeButton.setImmediate(true);
		horizontalLayout.addComponent(closeButton);
		
		previewButton = new Button();
		previewButton.setWidth("-1px");
		previewButton.setHeight("-1px");
		previewButton.setCaption("Vorschau");
		previewButton.setImmediate(true);
		horizontalLayout.addComponent(previewButton);
		
		htmlPreviewButton = new Button();
		htmlPreviewButton.setWidth("-1px");
		htmlPreviewButton.setHeight("-1px");
		htmlPreviewButton.setCaption("HTML Vorschau");
		htmlPreviewButton.setImmediate(true);
		horizontalLayout.addComponent(htmlPreviewButton);
		
		pdfLink = new Link();
		horizontalLayout.addComponent(pdfLink);
		
		csvLink = new Link();
		horizontalLayout.addComponent(csvLink);
		
		return mainLayout;
	}

}
